// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class CS_LOGIN;
struct CS_LOGINDefaultTypeInternal;
extern CS_LOGINDefaultTypeInternal _CS_LOGIN_default_instance_;
class CS_REGISTERREQ;
struct CS_REGISTERREQDefaultTypeInternal;
extern CS_REGISTERREQDefaultTypeInternal _CS_REGISTERREQ_default_instance_;
class CS_TEST;
struct CS_TESTDefaultTypeInternal;
extern CS_TESTDefaultTypeInternal _CS_TEST_default_instance_;
class SC_REGISTERRES;
struct SC_REGISTERRESDefaultTypeInternal;
extern SC_REGISTERRESDefaultTypeInternal _SC_REGISTERRES_default_instance_;
class SC_TEST;
struct SC_TESTDefaultTypeInternal;
extern SC_TESTDefaultTypeInternal _SC_TEST_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::CS_LOGIN* Arena::CreateMaybeMessage<::Protocol::CS_LOGIN>(Arena*);
template<> ::Protocol::CS_REGISTERREQ* Arena::CreateMaybeMessage<::Protocol::CS_REGISTERREQ>(Arena*);
template<> ::Protocol::CS_TEST* Arena::CreateMaybeMessage<::Protocol::CS_TEST>(Arena*);
template<> ::Protocol::SC_REGISTERRES* Arena::CreateMaybeMessage<::Protocol::SC_REGISTERRES>(Arena*);
template<> ::Protocol::SC_TEST* Arena::CreateMaybeMessage<::Protocol::SC_TEST>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class SC_TEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SC_TEST) */ {
 public:
  inline SC_TEST() : SC_TEST(nullptr) {}
  ~SC_TEST() override;
  explicit PROTOBUF_CONSTEXPR SC_TEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_TEST(const SC_TEST& from);
  SC_TEST(SC_TEST&& from) noexcept
    : SC_TEST() {
    *this = ::std::move(from);
  }

  inline SC_TEST& operator=(const SC_TEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_TEST& operator=(SC_TEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_TEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_TEST* internal_default_instance() {
    return reinterpret_cast<const SC_TEST*>(
               &_SC_TEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SC_TEST& a, SC_TEST& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_TEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_TEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_TEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_TEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_TEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_TEST& from) {
    SC_TEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_TEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SC_TEST";
  }
  protected:
  explicit SC_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SC_TEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_TEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CS_TEST) */ {
 public:
  inline CS_TEST() : CS_TEST(nullptr) {}
  ~CS_TEST() override;
  explicit PROTOBUF_CONSTEXPR CS_TEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_TEST(const CS_TEST& from);
  CS_TEST(CS_TEST&& from) noexcept
    : CS_TEST() {
    *this = ::std::move(from);
  }

  inline CS_TEST& operator=(const CS_TEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEST& operator=(CS_TEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_TEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_TEST* internal_default_instance() {
    return reinterpret_cast<const CS_TEST*>(
               &_CS_TEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CS_TEST& a, CS_TEST& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_TEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_TEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_TEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_TEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_TEST& from) {
    CS_TEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CS_TEST";
  }
  protected:
  explicit CS_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffsFieldNumber = 4,
    kIdFieldNumber = 1,
    kHpFieldNumber = 2,
    kAttackFieldNumber = 3,
  };
  // repeated .Protocol.BuffData buffs = 4;
  int buffs_size() const;
  private:
  int _internal_buffs_size() const;
  public:
  void clear_buffs();
  ::Protocol::BuffData* mutable_buffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::BuffData >*
      mutable_buffs();
  private:
  const ::Protocol::BuffData& _internal_buffs(int index) const;
  ::Protocol::BuffData* _internal_add_buffs();
  public:
  const ::Protocol::BuffData& buffs(int index) const;
  ::Protocol::BuffData* add_buffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::BuffData >&
      buffs() const;

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 attack = 3;
  void clear_attack();
  uint32_t attack() const;
  void set_attack(uint32_t value);
  private:
  uint32_t _internal_attack() const;
  void _internal_set_attack(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CS_TEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::BuffData > buffs_;
    uint64_t id_;
    uint32_t hp_;
    uint32_t attack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CS_LOGIN) */ {
 public:
  inline CS_LOGIN() : CS_LOGIN(nullptr) {}
  ~CS_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR CS_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_LOGIN(const CS_LOGIN& from);
  CS_LOGIN(CS_LOGIN&& from) noexcept
    : CS_LOGIN() {
    *this = ::std::move(from);
  }

  inline CS_LOGIN& operator=(const CS_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_LOGIN& operator=(CS_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_LOGIN* internal_default_instance() {
    return reinterpret_cast<const CS_LOGIN*>(
               &_CS_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CS_LOGIN& a, CS_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_LOGIN& from) {
    CS_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CS_LOGIN";
  }
  protected:
  explicit CS_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPlayerTypeFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // .Protocol.PlayerType playerType = 2;
  void clear_playertype();
  ::Protocol::PlayerType playertype() const;
  void set_playertype(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_playertype() const;
  void _internal_set_playertype(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CS_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    int playertype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_REGISTERREQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CS_REGISTERREQ) */ {
 public:
  inline CS_REGISTERREQ() : CS_REGISTERREQ(nullptr) {}
  ~CS_REGISTERREQ() override;
  explicit PROTOBUF_CONSTEXPR CS_REGISTERREQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_REGISTERREQ(const CS_REGISTERREQ& from);
  CS_REGISTERREQ(CS_REGISTERREQ&& from) noexcept
    : CS_REGISTERREQ() {
    *this = ::std::move(from);
  }

  inline CS_REGISTERREQ& operator=(const CS_REGISTERREQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_REGISTERREQ& operator=(CS_REGISTERREQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_REGISTERREQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_REGISTERREQ* internal_default_instance() {
    return reinterpret_cast<const CS_REGISTERREQ*>(
               &_CS_REGISTERREQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CS_REGISTERREQ& a, CS_REGISTERREQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_REGISTERREQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_REGISTERREQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_REGISTERREQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_REGISTERREQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_REGISTERREQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_REGISTERREQ& from) {
    CS_REGISTERREQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_REGISTERREQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CS_REGISTERREQ";
  }
  protected:
  explicit CS_REGISTERREQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string userId = 2;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CS_REGISTERREQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_REGISTERRES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SC_REGISTERRES) */ {
 public:
  inline SC_REGISTERRES() : SC_REGISTERRES(nullptr) {}
  ~SC_REGISTERRES() override;
  explicit PROTOBUF_CONSTEXPR SC_REGISTERRES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_REGISTERRES(const SC_REGISTERRES& from);
  SC_REGISTERRES(SC_REGISTERRES&& from) noexcept
    : SC_REGISTERRES() {
    *this = ::std::move(from);
  }

  inline SC_REGISTERRES& operator=(const SC_REGISTERRES& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_REGISTERRES& operator=(SC_REGISTERRES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_REGISTERRES& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_REGISTERRES* internal_default_instance() {
    return reinterpret_cast<const SC_REGISTERRES*>(
               &_SC_REGISTERRES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SC_REGISTERRES& a, SC_REGISTERRES& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_REGISTERRES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_REGISTERRES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_REGISTERRES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_REGISTERRES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_REGISTERRES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_REGISTERRES& from) {
    SC_REGISTERRES::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_REGISTERRES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SC_REGISTERRES";
  }
  protected:
  explicit SC_REGISTERRES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 3,
    kIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // string uid = 3;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // bool result = 2;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SC_REGISTERRES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    uint64_t id_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SC_TEST

// uint64 id = 1;
inline void SC_TEST::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t SC_TEST::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t SC_TEST::id() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_TEST.id)
  return _internal_id();
}
inline void SC_TEST::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void SC_TEST::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_TEST.id)
}

// -------------------------------------------------------------------

// CS_TEST

// uint64 id = 1;
inline void CS_TEST::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CS_TEST::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CS_TEST::id() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_TEST.id)
  return _internal_id();
}
inline void CS_TEST::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CS_TEST::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.CS_TEST.id)
}

// uint32 hp = 2;
inline void CS_TEST::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t CS_TEST::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t CS_TEST::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_TEST.hp)
  return _internal_hp();
}
inline void CS_TEST::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void CS_TEST::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.CS_TEST.hp)
}

// uint32 attack = 3;
inline void CS_TEST::clear_attack() {
  _impl_.attack_ = 0u;
}
inline uint32_t CS_TEST::_internal_attack() const {
  return _impl_.attack_;
}
inline uint32_t CS_TEST::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_TEST.attack)
  return _internal_attack();
}
inline void CS_TEST::_internal_set_attack(uint32_t value) {
  
  _impl_.attack_ = value;
}
inline void CS_TEST::set_attack(uint32_t value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.CS_TEST.attack)
}

// repeated .Protocol.BuffData buffs = 4;
inline int CS_TEST::_internal_buffs_size() const {
  return _impl_.buffs_.size();
}
inline int CS_TEST::buffs_size() const {
  return _internal_buffs_size();
}
inline ::Protocol::BuffData* CS_TEST::mutable_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.CS_TEST.buffs)
  return _impl_.buffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::BuffData >*
CS_TEST::mutable_buffs() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.CS_TEST.buffs)
  return &_impl_.buffs_;
}
inline const ::Protocol::BuffData& CS_TEST::_internal_buffs(int index) const {
  return _impl_.buffs_.Get(index);
}
inline const ::Protocol::BuffData& CS_TEST::buffs(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.CS_TEST.buffs)
  return _internal_buffs(index);
}
inline ::Protocol::BuffData* CS_TEST::_internal_add_buffs() {
  return _impl_.buffs_.Add();
}
inline ::Protocol::BuffData* CS_TEST::add_buffs() {
  ::Protocol::BuffData* _add = _internal_add_buffs();
  // @@protoc_insertion_point(field_add:Protocol.CS_TEST.buffs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::BuffData >&
CS_TEST::buffs() const {
  // @@protoc_insertion_point(field_list:Protocol.CS_TEST.buffs)
  return _impl_.buffs_;
}

// -------------------------------------------------------------------

// CS_LOGIN

// uint64 id = 1;
inline void CS_LOGIN::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CS_LOGIN::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CS_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_LOGIN.id)
  return _internal_id();
}
inline void CS_LOGIN::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CS_LOGIN::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.CS_LOGIN.id)
}

// .Protocol.PlayerType playerType = 2;
inline void CS_LOGIN::clear_playertype() {
  _impl_.playertype_ = 0;
}
inline ::Protocol::PlayerType CS_LOGIN::_internal_playertype() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.playertype_);
}
inline ::Protocol::PlayerType CS_LOGIN::playertype() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_LOGIN.playerType)
  return _internal_playertype();
}
inline void CS_LOGIN::_internal_set_playertype(::Protocol::PlayerType value) {
  
  _impl_.playertype_ = value;
}
inline void CS_LOGIN::set_playertype(::Protocol::PlayerType value) {
  _internal_set_playertype(value);
  // @@protoc_insertion_point(field_set:Protocol.CS_LOGIN.playerType)
}

// -------------------------------------------------------------------

// CS_REGISTERREQ

// uint64 id = 1;
inline void CS_REGISTERREQ::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CS_REGISTERREQ::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CS_REGISTERREQ::id() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_REGISTERREQ.id)
  return _internal_id();
}
inline void CS_REGISTERREQ::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CS_REGISTERREQ::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.CS_REGISTERREQ.id)
}

// string userId = 2;
inline void CS_REGISTERREQ::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& CS_REGISTERREQ::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_REGISTERREQ.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_REGISTERREQ::set_userid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CS_REGISTERREQ.userId)
}
inline std::string* CS_REGISTERREQ::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Protocol.CS_REGISTERREQ.userId)
  return _s;
}
inline const std::string& CS_REGISTERREQ::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void CS_REGISTERREQ::_internal_set_userid(const std::string& value) {
  
  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_REGISTERREQ::_internal_mutable_userid() {
  
  return _impl_.userid_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_REGISTERREQ::release_userid() {
  // @@protoc_insertion_point(field_release:Protocol.CS_REGISTERREQ.userId)
  return _impl_.userid_.Release();
}
inline void CS_REGISTERREQ::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  _impl_.userid_.SetAllocated(userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CS_REGISTERREQ.userId)
}

// string password = 3;
inline void CS_REGISTERREQ::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CS_REGISTERREQ::password() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_REGISTERREQ.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_REGISTERREQ::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CS_REGISTERREQ.password)
}
inline std::string* CS_REGISTERREQ::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.CS_REGISTERREQ.password)
  return _s;
}
inline const std::string& CS_REGISTERREQ::_internal_password() const {
  return _impl_.password_.Get();
}
inline void CS_REGISTERREQ::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_REGISTERREQ::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_REGISTERREQ::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.CS_REGISTERREQ.password)
  return _impl_.password_.Release();
}
inline void CS_REGISTERREQ::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CS_REGISTERREQ.password)
}

// -------------------------------------------------------------------

// SC_REGISTERRES

// uint64 id = 1;
inline void SC_REGISTERRES::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t SC_REGISTERRES::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t SC_REGISTERRES::id() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_REGISTERRES.id)
  return _internal_id();
}
inline void SC_REGISTERRES::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void SC_REGISTERRES::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_REGISTERRES.id)
}

// bool result = 2;
inline void SC_REGISTERRES::clear_result() {
  _impl_.result_ = false;
}
inline bool SC_REGISTERRES::_internal_result() const {
  return _impl_.result_;
}
inline bool SC_REGISTERRES::result() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_REGISTERRES.result)
  return _internal_result();
}
inline void SC_REGISTERRES::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void SC_REGISTERRES::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_REGISTERRES.result)
}

// string uid = 3;
inline void SC_REGISTERRES::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& SC_REGISTERRES::uid() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_REGISTERRES.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SC_REGISTERRES::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SC_REGISTERRES.uid)
}
inline std::string* SC_REGISTERRES::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:Protocol.SC_REGISTERRES.uid)
  return _s;
}
inline const std::string& SC_REGISTERRES::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void SC_REGISTERRES::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* SC_REGISTERRES::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* SC_REGISTERRES::release_uid() {
  // @@protoc_insertion_point(field_release:Protocol.SC_REGISTERRES.uid)
  return _impl_.uid_.Release();
}
inline void SC_REGISTERRES::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.SC_REGISTERRES.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
