// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class CS_LOGIN_REQ;
struct CS_LOGIN_REQDefaultTypeInternal;
extern CS_LOGIN_REQDefaultTypeInternal _CS_LOGIN_REQ_default_instance_;
class CS_REGISTER_REQ;
struct CS_REGISTER_REQDefaultTypeInternal;
extern CS_REGISTER_REQDefaultTypeInternal _CS_REGISTER_REQ_default_instance_;
class CS_SEND_CHAT_REQ;
struct CS_SEND_CHAT_REQDefaultTypeInternal;
extern CS_SEND_CHAT_REQDefaultTypeInternal _CS_SEND_CHAT_REQ_default_instance_;
class SC_CHAT_NOTI;
struct SC_CHAT_NOTIDefaultTypeInternal;
extern SC_CHAT_NOTIDefaultTypeInternal _SC_CHAT_NOTI_default_instance_;
class SC_LOGIN_RES;
struct SC_LOGIN_RESDefaultTypeInternal;
extern SC_LOGIN_RESDefaultTypeInternal _SC_LOGIN_RES_default_instance_;
class SC_REGISTER_RES;
struct SC_REGISTER_RESDefaultTypeInternal;
extern SC_REGISTER_RESDefaultTypeInternal _SC_REGISTER_RES_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::CS_LOGIN_REQ* Arena::CreateMaybeMessage<::Protocol::CS_LOGIN_REQ>(Arena*);
template<> ::Protocol::CS_REGISTER_REQ* Arena::CreateMaybeMessage<::Protocol::CS_REGISTER_REQ>(Arena*);
template<> ::Protocol::CS_SEND_CHAT_REQ* Arena::CreateMaybeMessage<::Protocol::CS_SEND_CHAT_REQ>(Arena*);
template<> ::Protocol::SC_CHAT_NOTI* Arena::CreateMaybeMessage<::Protocol::SC_CHAT_NOTI>(Arena*);
template<> ::Protocol::SC_LOGIN_RES* Arena::CreateMaybeMessage<::Protocol::SC_LOGIN_RES>(Arena*);
template<> ::Protocol::SC_REGISTER_RES* Arena::CreateMaybeMessage<::Protocol::SC_REGISTER_RES>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class CS_REGISTER_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CS_REGISTER_REQ) */ {
 public:
  inline CS_REGISTER_REQ() : CS_REGISTER_REQ(nullptr) {}
  ~CS_REGISTER_REQ() override;
  explicit PROTOBUF_CONSTEXPR CS_REGISTER_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_REGISTER_REQ(const CS_REGISTER_REQ& from);
  CS_REGISTER_REQ(CS_REGISTER_REQ&& from) noexcept
    : CS_REGISTER_REQ() {
    *this = ::std::move(from);
  }

  inline CS_REGISTER_REQ& operator=(const CS_REGISTER_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_REGISTER_REQ& operator=(CS_REGISTER_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_REGISTER_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_REGISTER_REQ* internal_default_instance() {
    return reinterpret_cast<const CS_REGISTER_REQ*>(
               &_CS_REGISTER_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CS_REGISTER_REQ& a, CS_REGISTER_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_REGISTER_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_REGISTER_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_REGISTER_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_REGISTER_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_REGISTER_REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_REGISTER_REQ& from) {
    CS_REGISTER_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_REGISTER_REQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CS_REGISTER_REQ";
  }
  protected:
  explicit CS_REGISTER_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string userId = 2;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CS_REGISTER_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_REGISTER_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SC_REGISTER_RES) */ {
 public:
  inline SC_REGISTER_RES() : SC_REGISTER_RES(nullptr) {}
  ~SC_REGISTER_RES() override;
  explicit PROTOBUF_CONSTEXPR SC_REGISTER_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_REGISTER_RES(const SC_REGISTER_RES& from);
  SC_REGISTER_RES(SC_REGISTER_RES&& from) noexcept
    : SC_REGISTER_RES() {
    *this = ::std::move(from);
  }

  inline SC_REGISTER_RES& operator=(const SC_REGISTER_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_REGISTER_RES& operator=(SC_REGISTER_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_REGISTER_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_REGISTER_RES* internal_default_instance() {
    return reinterpret_cast<const SC_REGISTER_RES*>(
               &_SC_REGISTER_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SC_REGISTER_RES& a, SC_REGISTER_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_REGISTER_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_REGISTER_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_REGISTER_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_REGISTER_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_REGISTER_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_REGISTER_RES& from) {
    SC_REGISTER_RES::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_REGISTER_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SC_REGISTER_RES";
  }
  protected:
  explicit SC_REGISTER_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPacketResultFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // .Protocol.PacketErrorType packetResult = 2;
  void clear_packetresult();
  ::Protocol::PacketErrorType packetresult() const;
  void set_packetresult(::Protocol::PacketErrorType value);
  private:
  ::Protocol::PacketErrorType _internal_packetresult() const;
  void _internal_set_packetresult(::Protocol::PacketErrorType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SC_REGISTER_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    int packetresult_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_LOGIN_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CS_LOGIN_REQ) */ {
 public:
  inline CS_LOGIN_REQ() : CS_LOGIN_REQ(nullptr) {}
  ~CS_LOGIN_REQ() override;
  explicit PROTOBUF_CONSTEXPR CS_LOGIN_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_LOGIN_REQ(const CS_LOGIN_REQ& from);
  CS_LOGIN_REQ(CS_LOGIN_REQ&& from) noexcept
    : CS_LOGIN_REQ() {
    *this = ::std::move(from);
  }

  inline CS_LOGIN_REQ& operator=(const CS_LOGIN_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_LOGIN_REQ& operator=(CS_LOGIN_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_LOGIN_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_LOGIN_REQ* internal_default_instance() {
    return reinterpret_cast<const CS_LOGIN_REQ*>(
               &_CS_LOGIN_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CS_LOGIN_REQ& a, CS_LOGIN_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_LOGIN_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_LOGIN_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_LOGIN_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_LOGIN_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_LOGIN_REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_LOGIN_REQ& from) {
    CS_LOGIN_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_LOGIN_REQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CS_LOGIN_REQ";
  }
  protected:
  explicit CS_LOGIN_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string userId = 2;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CS_LOGIN_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_LOGIN_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SC_LOGIN_RES) */ {
 public:
  inline SC_LOGIN_RES() : SC_LOGIN_RES(nullptr) {}
  ~SC_LOGIN_RES() override;
  explicit PROTOBUF_CONSTEXPR SC_LOGIN_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_LOGIN_RES(const SC_LOGIN_RES& from);
  SC_LOGIN_RES(SC_LOGIN_RES&& from) noexcept
    : SC_LOGIN_RES() {
    *this = ::std::move(from);
  }

  inline SC_LOGIN_RES& operator=(const SC_LOGIN_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_LOGIN_RES& operator=(SC_LOGIN_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_LOGIN_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_LOGIN_RES* internal_default_instance() {
    return reinterpret_cast<const SC_LOGIN_RES*>(
               &_SC_LOGIN_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SC_LOGIN_RES& a, SC_LOGIN_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_LOGIN_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_LOGIN_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_LOGIN_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_LOGIN_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_LOGIN_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_LOGIN_RES& from) {
    SC_LOGIN_RES::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_LOGIN_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SC_LOGIN_RES";
  }
  protected:
  explicit SC_LOGIN_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPacketResultFieldNumber = 2,
    kUidFieldNumber = 3,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // .Protocol.PacketErrorType packetResult = 2;
  void clear_packetresult();
  ::Protocol::PacketErrorType packetresult() const;
  void set_packetresult(::Protocol::PacketErrorType value);
  private:
  ::Protocol::PacketErrorType _internal_packetresult() const;
  void _internal_set_packetresult(::Protocol::PacketErrorType value);
  public:

  // int32 uid = 3;
  void clear_uid();
  int32_t uid() const;
  void set_uid(int32_t value);
  private:
  int32_t _internal_uid() const;
  void _internal_set_uid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SC_LOGIN_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    int packetresult_;
    int32_t uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_SEND_CHAT_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CS_SEND_CHAT_REQ) */ {
 public:
  inline CS_SEND_CHAT_REQ() : CS_SEND_CHAT_REQ(nullptr) {}
  ~CS_SEND_CHAT_REQ() override;
  explicit PROTOBUF_CONSTEXPR CS_SEND_CHAT_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_SEND_CHAT_REQ(const CS_SEND_CHAT_REQ& from);
  CS_SEND_CHAT_REQ(CS_SEND_CHAT_REQ&& from) noexcept
    : CS_SEND_CHAT_REQ() {
    *this = ::std::move(from);
  }

  inline CS_SEND_CHAT_REQ& operator=(const CS_SEND_CHAT_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_SEND_CHAT_REQ& operator=(CS_SEND_CHAT_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_SEND_CHAT_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_SEND_CHAT_REQ* internal_default_instance() {
    return reinterpret_cast<const CS_SEND_CHAT_REQ*>(
               &_CS_SEND_CHAT_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CS_SEND_CHAT_REQ& a, CS_SEND_CHAT_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_SEND_CHAT_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_SEND_CHAT_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_SEND_CHAT_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_SEND_CHAT_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_SEND_CHAT_REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_SEND_CHAT_REQ& from) {
    CS_SEND_CHAT_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_SEND_CHAT_REQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CS_SEND_CHAT_REQ";
  }
  protected:
  explicit CS_SEND_CHAT_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CS_SEND_CHAT_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_CHAT_NOTI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SC_CHAT_NOTI) */ {
 public:
  inline SC_CHAT_NOTI() : SC_CHAT_NOTI(nullptr) {}
  ~SC_CHAT_NOTI() override;
  explicit PROTOBUF_CONSTEXPR SC_CHAT_NOTI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_CHAT_NOTI(const SC_CHAT_NOTI& from);
  SC_CHAT_NOTI(SC_CHAT_NOTI&& from) noexcept
    : SC_CHAT_NOTI() {
    *this = ::std::move(from);
  }

  inline SC_CHAT_NOTI& operator=(const SC_CHAT_NOTI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CHAT_NOTI& operator=(SC_CHAT_NOTI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CHAT_NOTI& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CHAT_NOTI* internal_default_instance() {
    return reinterpret_cast<const SC_CHAT_NOTI*>(
               &_SC_CHAT_NOTI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SC_CHAT_NOTI& a, SC_CHAT_NOTI& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CHAT_NOTI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CHAT_NOTI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CHAT_NOTI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CHAT_NOTI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_CHAT_NOTI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_CHAT_NOTI& from) {
    SC_CHAT_NOTI::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CHAT_NOTI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SC_CHAT_NOTI";
  }
  protected:
  explicit SC_CHAT_NOTI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 2,
    kMsgFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string senderId = 2;
  void clear_senderid();
  const std::string& senderid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_senderid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_senderid();
  PROTOBUF_NODISCARD std::string* release_senderid();
  void set_allocated_senderid(std::string* senderid);
  private:
  const std::string& _internal_senderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senderid(const std::string& value);
  std::string* _internal_mutable_senderid();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SC_CHAT_NOTI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senderid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CS_REGISTER_REQ

// uint64 id = 1;
inline void CS_REGISTER_REQ::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CS_REGISTER_REQ::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CS_REGISTER_REQ::id() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_REGISTER_REQ.id)
  return _internal_id();
}
inline void CS_REGISTER_REQ::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CS_REGISTER_REQ::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.CS_REGISTER_REQ.id)
}

// string userId = 2;
inline void CS_REGISTER_REQ::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& CS_REGISTER_REQ::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_REGISTER_REQ.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_REGISTER_REQ::set_userid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CS_REGISTER_REQ.userId)
}
inline std::string* CS_REGISTER_REQ::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Protocol.CS_REGISTER_REQ.userId)
  return _s;
}
inline const std::string& CS_REGISTER_REQ::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void CS_REGISTER_REQ::_internal_set_userid(const std::string& value) {
  
  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_REGISTER_REQ::_internal_mutable_userid() {
  
  return _impl_.userid_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_REGISTER_REQ::release_userid() {
  // @@protoc_insertion_point(field_release:Protocol.CS_REGISTER_REQ.userId)
  return _impl_.userid_.Release();
}
inline void CS_REGISTER_REQ::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  _impl_.userid_.SetAllocated(userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CS_REGISTER_REQ.userId)
}

// string password = 3;
inline void CS_REGISTER_REQ::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CS_REGISTER_REQ::password() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_REGISTER_REQ.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_REGISTER_REQ::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CS_REGISTER_REQ.password)
}
inline std::string* CS_REGISTER_REQ::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.CS_REGISTER_REQ.password)
  return _s;
}
inline const std::string& CS_REGISTER_REQ::_internal_password() const {
  return _impl_.password_.Get();
}
inline void CS_REGISTER_REQ::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_REGISTER_REQ::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_REGISTER_REQ::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.CS_REGISTER_REQ.password)
  return _impl_.password_.Release();
}
inline void CS_REGISTER_REQ::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CS_REGISTER_REQ.password)
}

// -------------------------------------------------------------------

// SC_REGISTER_RES

// uint64 id = 1;
inline void SC_REGISTER_RES::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t SC_REGISTER_RES::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t SC_REGISTER_RES::id() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_REGISTER_RES.id)
  return _internal_id();
}
inline void SC_REGISTER_RES::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void SC_REGISTER_RES::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_REGISTER_RES.id)
}

// .Protocol.PacketErrorType packetResult = 2;
inline void SC_REGISTER_RES::clear_packetresult() {
  _impl_.packetresult_ = 0;
}
inline ::Protocol::PacketErrorType SC_REGISTER_RES::_internal_packetresult() const {
  return static_cast< ::Protocol::PacketErrorType >(_impl_.packetresult_);
}
inline ::Protocol::PacketErrorType SC_REGISTER_RES::packetresult() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_REGISTER_RES.packetResult)
  return _internal_packetresult();
}
inline void SC_REGISTER_RES::_internal_set_packetresult(::Protocol::PacketErrorType value) {
  
  _impl_.packetresult_ = value;
}
inline void SC_REGISTER_RES::set_packetresult(::Protocol::PacketErrorType value) {
  _internal_set_packetresult(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_REGISTER_RES.packetResult)
}

// -------------------------------------------------------------------

// CS_LOGIN_REQ

// uint64 id = 1;
inline void CS_LOGIN_REQ::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CS_LOGIN_REQ::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CS_LOGIN_REQ::id() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_LOGIN_REQ.id)
  return _internal_id();
}
inline void CS_LOGIN_REQ::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CS_LOGIN_REQ::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.CS_LOGIN_REQ.id)
}

// string userId = 2;
inline void CS_LOGIN_REQ::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& CS_LOGIN_REQ::userid() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_LOGIN_REQ.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_LOGIN_REQ::set_userid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CS_LOGIN_REQ.userId)
}
inline std::string* CS_LOGIN_REQ::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Protocol.CS_LOGIN_REQ.userId)
  return _s;
}
inline const std::string& CS_LOGIN_REQ::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void CS_LOGIN_REQ::_internal_set_userid(const std::string& value) {
  
  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_LOGIN_REQ::_internal_mutable_userid() {
  
  return _impl_.userid_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_LOGIN_REQ::release_userid() {
  // @@protoc_insertion_point(field_release:Protocol.CS_LOGIN_REQ.userId)
  return _impl_.userid_.Release();
}
inline void CS_LOGIN_REQ::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  _impl_.userid_.SetAllocated(userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CS_LOGIN_REQ.userId)
}

// string password = 3;
inline void CS_LOGIN_REQ::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CS_LOGIN_REQ::password() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_LOGIN_REQ.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_LOGIN_REQ::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CS_LOGIN_REQ.password)
}
inline std::string* CS_LOGIN_REQ::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.CS_LOGIN_REQ.password)
  return _s;
}
inline const std::string& CS_LOGIN_REQ::_internal_password() const {
  return _impl_.password_.Get();
}
inline void CS_LOGIN_REQ::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_LOGIN_REQ::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_LOGIN_REQ::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.CS_LOGIN_REQ.password)
  return _impl_.password_.Release();
}
inline void CS_LOGIN_REQ::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CS_LOGIN_REQ.password)
}

// -------------------------------------------------------------------

// SC_LOGIN_RES

// uint64 id = 1;
inline void SC_LOGIN_RES::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t SC_LOGIN_RES::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t SC_LOGIN_RES::id() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_LOGIN_RES.id)
  return _internal_id();
}
inline void SC_LOGIN_RES::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void SC_LOGIN_RES::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_LOGIN_RES.id)
}

// .Protocol.PacketErrorType packetResult = 2;
inline void SC_LOGIN_RES::clear_packetresult() {
  _impl_.packetresult_ = 0;
}
inline ::Protocol::PacketErrorType SC_LOGIN_RES::_internal_packetresult() const {
  return static_cast< ::Protocol::PacketErrorType >(_impl_.packetresult_);
}
inline ::Protocol::PacketErrorType SC_LOGIN_RES::packetresult() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_LOGIN_RES.packetResult)
  return _internal_packetresult();
}
inline void SC_LOGIN_RES::_internal_set_packetresult(::Protocol::PacketErrorType value) {
  
  _impl_.packetresult_ = value;
}
inline void SC_LOGIN_RES::set_packetresult(::Protocol::PacketErrorType value) {
  _internal_set_packetresult(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_LOGIN_RES.packetResult)
}

// int32 uid = 3;
inline void SC_LOGIN_RES::clear_uid() {
  _impl_.uid_ = 0;
}
inline int32_t SC_LOGIN_RES::_internal_uid() const {
  return _impl_.uid_;
}
inline int32_t SC_LOGIN_RES::uid() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_LOGIN_RES.uid)
  return _internal_uid();
}
inline void SC_LOGIN_RES::_internal_set_uid(int32_t value) {
  
  _impl_.uid_ = value;
}
inline void SC_LOGIN_RES::set_uid(int32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_LOGIN_RES.uid)
}

// -------------------------------------------------------------------

// CS_SEND_CHAT_REQ

// uint64 id = 1;
inline void CS_SEND_CHAT_REQ::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t CS_SEND_CHAT_REQ::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CS_SEND_CHAT_REQ::id() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_SEND_CHAT_REQ.id)
  return _internal_id();
}
inline void CS_SEND_CHAT_REQ::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void CS_SEND_CHAT_REQ::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.CS_SEND_CHAT_REQ.id)
}

// string msg = 2;
inline void CS_SEND_CHAT_REQ::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& CS_SEND_CHAT_REQ::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.CS_SEND_CHAT_REQ.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_SEND_CHAT_REQ::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CS_SEND_CHAT_REQ.msg)
}
inline std::string* CS_SEND_CHAT_REQ::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.CS_SEND_CHAT_REQ.msg)
  return _s;
}
inline const std::string& CS_SEND_CHAT_REQ::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void CS_SEND_CHAT_REQ::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_SEND_CHAT_REQ::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_SEND_CHAT_REQ::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.CS_SEND_CHAT_REQ.msg)
  return _impl_.msg_.Release();
}
inline void CS_SEND_CHAT_REQ::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CS_SEND_CHAT_REQ.msg)
}

// -------------------------------------------------------------------

// SC_CHAT_NOTI

// uint64 id = 1;
inline void SC_CHAT_NOTI::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t SC_CHAT_NOTI::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t SC_CHAT_NOTI::id() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_CHAT_NOTI.id)
  return _internal_id();
}
inline void SC_CHAT_NOTI::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void SC_CHAT_NOTI::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SC_CHAT_NOTI.id)
}

// string senderId = 2;
inline void SC_CHAT_NOTI::clear_senderid() {
  _impl_.senderid_.ClearToEmpty();
}
inline const std::string& SC_CHAT_NOTI::senderid() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_CHAT_NOTI.senderId)
  return _internal_senderid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SC_CHAT_NOTI::set_senderid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.senderid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SC_CHAT_NOTI.senderId)
}
inline std::string* SC_CHAT_NOTI::mutable_senderid() {
  std::string* _s = _internal_mutable_senderid();
  // @@protoc_insertion_point(field_mutable:Protocol.SC_CHAT_NOTI.senderId)
  return _s;
}
inline const std::string& SC_CHAT_NOTI::_internal_senderid() const {
  return _impl_.senderid_.Get();
}
inline void SC_CHAT_NOTI::_internal_set_senderid(const std::string& value) {
  
  _impl_.senderid_.Set(value, GetArenaForAllocation());
}
inline std::string* SC_CHAT_NOTI::_internal_mutable_senderid() {
  
  return _impl_.senderid_.Mutable(GetArenaForAllocation());
}
inline std::string* SC_CHAT_NOTI::release_senderid() {
  // @@protoc_insertion_point(field_release:Protocol.SC_CHAT_NOTI.senderId)
  return _impl_.senderid_.Release();
}
inline void SC_CHAT_NOTI::set_allocated_senderid(std::string* senderid) {
  if (senderid != nullptr) {
    
  } else {
    
  }
  _impl_.senderid_.SetAllocated(senderid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.senderid_.IsDefault()) {
    _impl_.senderid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.SC_CHAT_NOTI.senderId)
}

// string msg = 3;
inline void SC_CHAT_NOTI::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& SC_CHAT_NOTI::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.SC_CHAT_NOTI.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SC_CHAT_NOTI::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SC_CHAT_NOTI.msg)
}
inline std::string* SC_CHAT_NOTI::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.SC_CHAT_NOTI.msg)
  return _s;
}
inline const std::string& SC_CHAT_NOTI::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void SC_CHAT_NOTI::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* SC_CHAT_NOTI::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* SC_CHAT_NOTI::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.SC_CHAT_NOTI.msg)
  return _impl_.msg_.Release();
}
inline void SC_CHAT_NOTI::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.SC_CHAT_NOTI.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
